{"version":3,"sources":["components/BingoCell.js","components/BingoTable.js","App.js","index.js"],"names":["BingoCell","state","checked","handleClick","e","setState","className","this","onClick","props","info","phrase","Component","CELLS_ROW","Math","sqrt","BingoTable","Table","bordered","renderBingoCells","phrases","PhraseList","push","list","temporaryValue","randomIndex","currentIndex","length","floor","random","shufflePhraseList","getPhraseList","cells","i","key","App","validation","Container","Row","Col","md","sm","xs","ReactDOM","render","document","getElementById"],"mappings":"kyJA+BeA,G,iNAtBdC,MAAQ,CACPC,SAAS,G,EAGVC,YAAc,SAACC,GACd,EAAKC,SAAS,CACbH,SAAU,EAAKD,MAAMC,W,wEAKtB,OACE,wBACEI,UAAWC,KAAKN,MAAMC,QAAU,kBAAmB,UACnDM,QAASD,KAAKJ,aAEf,2BAAII,KAAKE,MAAMC,KAAKC,a,GAjBDC,c,QCFlBC,EAAYC,KAAKC,KADL,IA+DHC,E,iLATb,OACC,kBAACC,EAAA,EAAD,CAAOC,UAAQ,EAACZ,UAAU,eAExBU,EAAWG,uB,uCA7Cd,IAAIC,EAAU,GADQ,uBAEtB,YAAmBC,EAAnB,+CAA+B,CAAC,IAAvBV,EAAsB,QAC9BS,EAAQE,KAAKX,IAHQ,kFAKtB,OAAOS,I,wCAIiBG,GAMxB,IALA,IACIC,EACAC,EAFAC,EAAeH,EAAKI,OAKjB,IAAMD,GAEZD,EAAcX,KAAKc,MAAMd,KAAKe,SAAWH,GAGzCF,EAAiBD,IAFjBG,GAGAH,EAAKG,GAAgBH,EAAKE,GAC1BF,EAAKE,GAAeD,EAErB,OAAOD,I,yCAOP,IAFA,IAAIH,EAAUJ,EAAWc,kBAAkBd,EAAWe,iBAClDC,EAAQ,GACHC,EAAI,EAAGA,EA1CA,GA0CeA,IAC3BA,EAAIpB,IAAc,GACpBmB,EAAMV,KAAK,8BAEZU,EAAMV,KAAK,kBAAC,EAAD,CAAWY,IAAKD,EAAGvB,KAAMU,EAAQa,MAG7C,OAAOD,M,GAxCgBpB,a,gBCyBVuB,E,2MAzBblC,MAAQ,CACNmC,YAAY,G,wEAIZ,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKhC,UAAU,kCACb,kBAACiC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACvB,wBAAIpC,UAAU,yBAAd,mCACA,uBAAGA,UAAU,aAAb,sVAAyF,6BACvF,+RAIN,kBAACgC,EAAA,EAAD,CAAKhC,UAAU,6BACb,kBAACiC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACvB,kBAAC,EAAD,a,GAlBM9B,aCRlB+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fe1e75a3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './BingoCell.css';\n\n/*\n * It renders one single cell\n * with phrase (which is prop)\n */\n\nclass BingoCell extends Component {\n\tstate = {\n\t\tchecked: false,\n\t};\n\n\thandleClick = (e) => {\n\t\tthis.setState({\n\t\t\tchecked: !this.state.checked\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t\t<td\n\t\t\t\t\t\tclassName={this.state.checked ? 'content checked': 'content'}\n\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t>\n\t\t\t\t\t<p>{this.props.info.phrase}</p>\n\t\t\t\t</td>\n\t\t);\n\t}\n}\n\nexport default BingoCell;","import React, {Component} from 'react';\nimport PhraseList from '../data/phrases.json'\nimport BingoCell from \"./BingoCell\";\nimport Table from \"react-bootstrap/Table\";\n\nconst CELLS_NUM = 25;\nconst CELLS_ROW = Math.sqrt(CELLS_NUM);\n\n/*\n * It parses the list of phrases,\n * shuffles the list, calls CELLS_NUM\n * cells for CELLS_NUM shuffled phrases\n */\n\nclass BingoTable extends Component {\n\n\tstatic getPhraseList() {\n\t\tlet phrases = [];\n\t\tfor (let phrase of PhraseList) {\n\t\t\tphrases.push(phrase);\n\t\t}\n\t\treturn phrases;\n\t}\n\n\t// Knuth shuffle\n\tstatic shufflePhraseList(list) {\n\t\tlet currentIndex = list.length;\n\t\tlet temporaryValue;\n\t\tlet randomIndex;\n\n\t\t// While there remain elements to shuffle\n\t\twhile (0 !== currentIndex) {\n\t\t\t// Pick a remaining element\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex--;\n\t\t\t// And swap it with the current element.\n\t\t\ttemporaryValue = list[currentIndex];\n\t\t\tlist[currentIndex] = list[randomIndex];\n\t\t\tlist[randomIndex] = temporaryValue;\n\t\t}\n\t\treturn list;\n\t}\n\n\tstatic renderBingoCells() {\n\t\t// Maybe it will be better to go throw array for one time, but who cares...\n\t\tlet phrases = BingoTable.shufflePhraseList(BingoTable.getPhraseList()); // TODO: think about complexity\n\t\tlet cells = [];\n\t\tfor (let i = 0; i < CELLS_NUM; i++) {\n\t\t\tif(i % CELLS_ROW === 0){\n\t\t\t\tcells.push(<tr/>);\n\t\t\t}\n\t\t\tcells.push(<BingoCell key={i} info={phrases[i]}/>);\n\t\t}\n\n\t\treturn cells;\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<Table bordered className=\"text-center\">\n\t\t\t\t{/*Упаковать в табличку 6x6 */}\n\t\t\t\t{BingoTable.renderBingoCells()}\n\t\t\t</Table>\n\t\t);\n\t}\n}\n\nexport default BingoTable;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Container from \"react-bootstrap/Container\";\nimport BingoTable from \"./components/BingoTable\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\n/*\n * It gets the validation,\n * after that shows the Bingo Table\n */\n\nclass App extends Component {\n  state = {\n    validation: false\n  };\n\n  render () {\n    return (\n      <Container >\n        <Row className=\"justify-content-md-center pt-2\">\n          <Col md={10} sm={12} xs={12}>\n            <h1 className=\"pt-2 pb-2 text-center\">Бинго!</h1>\n            <p className=\"pb-2 ml-5\">Собравший всю строку/столбец/диагональ обязан выкрикнуть \"бинго\"<br/>\n              <i>и пусть Глебовский припомнит вам это на экзамене</i>\n            </p>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md={12} sm={12} xs={12}>\n            <BingoTable/>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}